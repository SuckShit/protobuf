// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my_test.proto

#include "my_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace fuckingasshole {
class testwhatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<testwhat> _instance;
} _testwhat_default_instance_;
}  // namespace fuckingasshole
static void InitDefaultstestwhat_my_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fuckingasshole::_testwhat_default_instance_;
    new (ptr) ::fuckingasshole::testwhat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fuckingasshole::testwhat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_testwhat_my_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstestwhat_my_5ftest_2eproto}, {}};

void InitDefaults_my_5ftest_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_testwhat_my_5ftest_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_my_5ftest_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_my_5ftest_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_my_5ftest_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_my_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fuckingasshole::testwhat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fuckingasshole::testwhat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fuckingasshole::testwhat, opint_),
  PROTOBUF_FIELD_OFFSET(::fuckingasshole::testwhat, opbl_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::fuckingasshole::testwhat)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fuckingasshole::_testwhat_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_my_5ftest_2eproto = {
  {}, AddDescriptors_my_5ftest_2eproto, "my_test.proto", schemas,
  file_default_instances, TableStruct_my_5ftest_2eproto::offsets,
  file_level_metadata_my_5ftest_2eproto, 1, file_level_enum_descriptors_my_5ftest_2eproto, file_level_service_descriptors_my_5ftest_2eproto,
};

const char descriptor_table_protodef_my_5ftest_2eproto[] =
  "\n\rmy_test.proto\022\016fuckingasshole\"\'\n\010testw"
  "hat\022\r\n\005opint\030\001 \001(\005\022\014\n\004opbl\030\002 \001(\010"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_my_5ftest_2eproto = {
  false, InitDefaults_my_5ftest_2eproto, 
  descriptor_table_protodef_my_5ftest_2eproto,
  "my_test.proto", &assign_descriptors_table_my_5ftest_2eproto, 72,
};

void AddDescriptors_my_5ftest_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_my_5ftest_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_my_5ftest_2eproto = []() { AddDescriptors_my_5ftest_2eproto(); return true; }();
namespace fuckingasshole {

// ===================================================================

void testwhat::InitAsDefaultInstance() {
}
class testwhat::HasBitSetters {
 public:
  static void set_has_opint(testwhat* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_opbl(testwhat* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int testwhat::kOpintFieldNumber;
const int testwhat::kOpblFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

testwhat::testwhat()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fuckingasshole.testwhat)
}
testwhat::testwhat(const testwhat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&opint_, &from.opint_,
    static_cast<size_t>(reinterpret_cast<char*>(&opbl_) -
    reinterpret_cast<char*>(&opint_)) + sizeof(opbl_));
  // @@protoc_insertion_point(copy_constructor:fuckingasshole.testwhat)
}

void testwhat::SharedCtor() {
  ::memset(&opint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opbl_) -
      reinterpret_cast<char*>(&opint_)) + sizeof(opbl_));
}

testwhat::~testwhat() {
  // @@protoc_insertion_point(destructor:fuckingasshole.testwhat)
  SharedDtor();
}

void testwhat::SharedDtor() {
}

void testwhat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const testwhat& testwhat::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_testwhat_my_5ftest_2eproto.base);
  return *internal_default_instance();
}


void testwhat::Clear() {
// @@protoc_insertion_point(message_clear_start:fuckingasshole.testwhat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&opint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opbl_) -
        reinterpret_cast<char*>(&opint_)) + sizeof(opbl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* testwhat::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<testwhat*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 opint = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_opint(value);
        break;
      }
      // optional bool opbl = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_opbl(value);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool testwhat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fuckingasshole.testwhat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_opint(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool opbl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_opbl(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opbl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fuckingasshole.testwhat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fuckingasshole.testwhat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void testwhat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fuckingasshole.testwhat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 opint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opint(), output);
  }

  // optional bool opbl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->opbl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fuckingasshole.testwhat)
}

::google::protobuf::uint8* testwhat::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fuckingasshole.testwhat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 opint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opint(), target);
  }

  // optional bool opbl = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->opbl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fuckingasshole.testwhat)
  return target;
}

size_t testwhat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fuckingasshole.testwhat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 opint = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opint());
    }

    // optional bool opbl = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void testwhat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fuckingasshole.testwhat)
  GOOGLE_DCHECK_NE(&from, this);
  const testwhat* source =
      ::google::protobuf::DynamicCastToGenerated<testwhat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fuckingasshole.testwhat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fuckingasshole.testwhat)
    MergeFrom(*source);
  }
}

void testwhat::MergeFrom(const testwhat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fuckingasshole.testwhat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      opint_ = from.opint_;
    }
    if (cached_has_bits & 0x00000002u) {
      opbl_ = from.opbl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void testwhat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fuckingasshole.testwhat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void testwhat::CopyFrom(const testwhat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fuckingasshole.testwhat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool testwhat::IsInitialized() const {
  return true;
}

void testwhat::Swap(testwhat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void testwhat::InternalSwap(testwhat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(opint_, other->opint_);
  swap(opbl_, other->opbl_);
}

::google::protobuf::Metadata testwhat::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_my_5ftest_2eproto);
  return ::file_level_metadata_my_5ftest_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fuckingasshole
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::fuckingasshole::testwhat* Arena::CreateMaybeMessage< ::fuckingasshole::testwhat >(Arena* arena) {
  return Arena::CreateInternal< ::fuckingasshole::testwhat >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
